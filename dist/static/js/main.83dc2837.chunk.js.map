{"version":3,"sources":["graphs/DepGraph.js","views/nav.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","DepGraph","react_force_graph__WEBPACK_IMPORTED_MODULE_0__","React","require","exampleConfig","d3","configData","self","CONFIG","Component","constructor","super","this","state","data","nodes","links","container","width","height","componentDidMount","forceGraph","triggerGraphUpdate","window","xyz","d3Force","strength","forceX","forceY","componentWillReceiveProps","nextProps","props","mode","bundleData","sesifyMode","newProps","updateGraph","newGraph","selectedNode","createModuleGraph","packageData","Object","entries","forEach","parentId","moduleData","packageName","getPackageVersionName","pack","size","assign","file","entry","deps","values","childId","createPackageGraph","createGraphByMode","nodeLookup","Map","map","node","id","oldNode","newNode","get","x","y","vx","vy","setState","render","actions","selectedNodeLabel","label","configLabel","createElement","Fragment","style","position","background","padding","zIndex","ref","el","graphData","linkDirectionalArrowLength","linkDirectionalArrowRelPos","nodeLabel","onNodeHover","linkWidth","link","linkColor","color","parentData","packageVersionName","configForPackage","resources","JSON","stringify","isSesify","sesifyColor","packageConfig","globals","keys","some","glob","redAlertGlobals","includes","orangeAlertGlobals","getColorForConfig","push","createNode","radius","selectedNodeId","depName","String","undefined","params","source","target","createLink","packageVersion","Tab","Tabs","NavTabs","routes","activeKey","activeRoute","onSelect","onNavigate","route","key","eventKey","title","exampleDeps","bundles","DEPS","sesifyModes","App","bundle","selectMode","selectSesifyMode","react_default","a","className","nav","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83dc2837.chunk.js","sourcesContent":["import { ForceGraph2D, ForceGraph3D, ForceGraphVR } from 'react-force-graph'\n\nconst React = require('react')\nconst ObservableStore = require('obs-store')\nconst exampleConfig = require('../example-config.json')\nconst d3 = require('d3')\n\n// const configData = require('../data/config.json')\nconst configData = self.CONFIG || exampleConfig\n\nclass DepGraph extends React.Component {\n\n  constructor () {\n    super()\n    // prepare empty graph\n    const graph = { nodes: [], links: [], container: { width: 0, height: 0 } }\n\n    this.state = {\n      data: graph,\n    };\n  }\n\n  componentDidMount () {\n    const { forceGraph } = this\n    this.triggerGraphUpdate()\n\n    window.xyz = forceGraph\n\n    forceGraph.d3Force('charge').strength(-50)\n    forceGraph.d3Force('x', d3.forceX(0, 1))\n    forceGraph.d3Force('y', d3.forceY(0, 1))\n  }\n\n  componentWillReceiveProps (nextProps) {\n    // recalculate graph if `mode` or `bundleData` change\n    if (this.props.mode !== nextProps.mode\n      || this.props.bundleData !== nextProps.bundleData\n      || this.props.sesifyMode !== nextProps.sesifyMode) {\n      triggerGraphUpdate(nextProps)\n    }\n  }\n\n  triggerGraphUpdate (newProps = this.props) {\n    const { state } = this\n    const { bundleData } = newProps\n    this.updateGraph(bundleData, newProps, state)\n  }\n\n  updateGraph (bundleData, props, state) {\n    const newGraph = createGraphByMode(bundleData, props, state)\n    // create a map for faster lookups by id\n    const nodeLookup = new Map(newGraph.nodes.map(node => [node.id, node]))\n    // copy simulation data from old graph\n    const oldGraph = this.state.data\n    oldGraph.nodes.forEach((oldNode) => {\n      const newNode = nodeLookup.get(oldNode.id)\n      if (!newNode) return\n      const { x, y, vx, vy } = oldNode\n      Object.assign(newNode, { x, y, vx, vy })\n    })\n    // commit new graph\n    this.setState(() => ({ data: newGraph }))\n  }\n\n  render () {\n    const actions = {\n      selectNode: (node) => {\n        this.setState(() => ({ selectedNode: node }))\n        this.triggerGraphUpdate()\n      }\n    }\n\n    const { data, selectedNode } = this.state\n    const selectedNodeLabel = selectedNode ? `${selectedNode.label}\\n${selectedNode.configLabel}` : 'select a node'\n\n    return (\n      <>\n        <pre style={{\n          position: 'absolute',\n          background: 'rgba(232, 232, 232, 0.78)',\n          padding: '12px',\n          // draw on top of graph\n          zIndex: 1,\n        }}>\n          {selectedNodeLabel}\n        </pre>\n        <ForceGraph2D\n          ref={el => this.forceGraph = el}\n          graphData={data}\n          linkDirectionalArrowLength={4}\n          linkDirectionalArrowRelPos={1}\n          nodeLabel={'label'}\n          onNodeHover={(node) => {\n            if (!node) return\n            actions.selectNode(node)\n          }}\n          linkWidth={(link) => link.width}\n          linkColor={(link) => link.color}\n        />\n      </>\n    )\n  }\n}\n\nexport { DepGraph }\n\n\nfunction createGraphByMode (bundleData, { mode, sesifyMode }, { selectedNode }) {\n  // create graph for mode\n  if (mode === 'modules') {\n    return createModuleGraph(bundleData, { sesifyMode }, { selectedNode })\n  } else {\n    return createPackageGraph(bundleData, { sesifyMode }, { selectedNode })\n  }\n}\n\nfunction createPackageGraph (bundleData, { sesifyMode }, { selectedNode }) {\n  const packageData = {}\n  \n  // create a fake `bundleData` using the packages\n  Object.entries(bundleData).forEach(([parentId, moduleData]) => {\n    const packageName = getPackageVersionName(moduleData)\n    let pack = packageData[packageName]\n    // if first moduleData in package, initialize with moduleData\n    if (!pack) {\n      pack = Object.assign({}, moduleData)\n      pack.file = packageName\n      pack.entry = (packageName === '<root>')\n      pack.deps = {}\n      packageData[packageName] = pack\n    } else {\n      // package already exists, just need add size (deps added later)\n      const { size } = moduleData\n      pack.size += size\n    }\n    // add deps\n    Object.values(moduleData.deps).forEach(childId => {\n      // use `id` so that there are not redundant links. the actual key is not important.\n      pack.deps[childId] = getPackageVersionName(bundleData[childId])\n    })\n  })\n\n  return createModuleGraph(packageData, { sesifyMode }, { selectedNode })\n}\n\nfunction createModuleGraph (bundleData, { sesifyMode }, { selectedNode }) {\n  const nodes = [], links = []\n\n  // for each module, create node and links \n  Object.entries(bundleData).forEach(([parentId, parentData]) => {\n    const { file, deps, size, entry, packageName } = parentData\n    const packageVersionName = getPackageVersionName(parentData)\n    const radius = 5\n    const configForPackage = configData.resources[packageName] || {}\n    const configLabel = JSON.stringify(configForPackage, null, 2)\n    const label = `${file}`\n    const isEntryPackage = packageVersionName === '<root>'\n    const isSesify = sesifyMode === 'sesify'\n    const sesifyColor = isEntryPackage ? 'purple' : getColorForConfig(configForPackage)\n    const color = isSesify ? sesifyColor : 'red'\n    // create node for modules\n    nodes.push(\n      createNode({ id: parentId, radius, label, configLabel, color })\n    )\n    const selectedNodeId = selectedNode && selectedNode.id\n\n    // create links for deps\n    Object.keys(deps).forEach(depName => {\n      const childId = String(deps[depName])\n\n      let width = undefined\n      let color = undefined\n\n      if (parentId === selectedNodeId) {\n        width = 3\n        color = 'green'\n      }\n\n      if (childId === selectedNodeId) {\n        width = 3\n        color = 'blue'\n      }\n\n      links.push(\n        createLink({ color, width, source: parentId, target: childId })\n      )\n    })\n  })\n\n  // handle missing nodes (e.g. external deps)\n  links.forEach(link => {\n    if (!bundleData[link.target]) {\n      nodes.push(\n        createNode({ id: link.target, radius: 0 })\n      )\n    }\n  })\n\n  return { nodes, links }\n}\n\nconst redAlertGlobals = [\n  'chrome',\n  'window',\n  'document',\n  'document.body',\n  'document.body.appendChild',\n  'location',\n  'XMLHttpRequest',\n  'fetch',\n  'WebSocket',\n  'crypto',\n]\n\nconst orangeAlertGlobals = [\n  'localStorage',\n  'prompt',\n]\n\nfunction getColorForConfig (packageConfig) {\n  // no globals - should be safe\n  if (!packageConfig.globals) return 'green'\n  const globals = Object.keys(packageConfig.globals)\n  if (globals.some(glob => redAlertGlobals.includes(glob))) {\n    return 'red'\n  }\n  if (globals.some(glob => orangeAlertGlobals.includes(glob))) {\n    return 'brown'\n  }\n  // has globals but nothing scary\n  return 'orange'\n}\n\nfunction getPackageVersionName ({ packageName, packageVersion }) {\n  if (packageVersion) {\n    return `${packageName}@${packageVersion}`\n  } else {\n    return packageName\n  }\n}\n\nfunction createLink(params) {\n  const { source, target } = params\n  const link = Object.assign({\n    id: `${source}-${target}`,\n    source,\n    target,\n    // value: 1,\n    // distance: 30,\n  }, params)\n  return link\n}\n\nfunction createNode(params) {\n  const node = Object.assign({\n    // color: 'green',\n    radius: 5,\n  }, params)\n  return node\n}","import './bootstrap.css';\nconst React = require('react')\nconst Tab = require('react-bootstrap/Tab')\nconst Tabs = require('react-bootstrap/Tabs')\n\nclass NavTabs extends React.Component {\n  render() {\n    const { routes } = this.props\n    return (\n      <Tabs\n        id=\"navigation-tabs\"\n        activeKey={this.props.activeRoute}\n        onSelect={this.props.onNavigate}\n      >\n        {routes.map(route => (\n          <Tab key={route} eventKey={route} title={route}></Tab>\n        ))}\n      </Tabs>\n    )\n  }\n}\n\nexport default NavTabs","import React, { Component } from 'react'\nimport './App.css'\nimport Nav from './views/nav'\n\nconst { DepGraph } = require('./graphs/DepGraph')\nconst exampleDeps = require('./example-deps.json')\n// const bundles = {\n//   'background': require('./data/deps.json'),\n// }\n\n/* eslint-disable no-restricted-globals */\nconst bundles = { background: self.DEPS || exampleDeps }\nconst bundleNames = Object.keys(bundles)\n\nconst routes = ['packages', 'modules']\nconst sesifyModes = ['sesify', 'without']\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      mode: routes[0],\n      bundle: 'background',\n      sesifyMode: sesifyModes[0],\n    }\n  }\n\n  selectMode (target) {\n    this.setState(state => ({ mode: target }))\n  }\n\n  selectSesifyMode (target) {\n    this.setState(state => ({ sesifyMode: target }))\n  }\n\n  // selectBundle (target) {\n  //   this.setState(state => ({ bundle: target }))\n  // }\n\n  render () {\n    const bundleData = bundles[this.state.bundle]\n    return (\n      <div className=\"App\">\n        <Nav\n          routes={sesifyModes}\n          activeRoute={this.state.sesifyMode}\n          onNavigate={(target) => this.selectSesifyMode(target)}\n          />\n        <Nav\n          routes={routes}\n          activeRoute={this.state.mode}\n          onNavigate={(target) => this.selectMode(target)}\n          />\n        <DepGraph\n          bundleData={bundleData}\n          mode={this.state.mode}\n          sesifyMode={this.state.sesifyMode}\n          /> \n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}